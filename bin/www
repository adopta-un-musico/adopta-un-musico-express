#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("project:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

const socket = require("socket.io");
const Chat = require("../models/Chat_model");

const io = socket(server);
io.on("connection", socket => {
  const user = "";
  const send = true;
  console.log("conectado", socket.id);
  console.log(io.engine.clientsCount);
  socket.on("room", e => {
    socket.join(e.sala);
    const chat = Chat.find({room: e.sala}).then( function (docs) {
      io.sockets.in(e.sala).emit("all messages", docs);
    });
    console.log("te has unido a la sala: " + e.sala);
  });

  socket.on("chat message", msg => {
    const chat = Chat.create({username: msg.username, message: msg.message, room: msg.sala})
    io.sockets.in(msg.sala).emit("chat message", msg);
    const user = msg.username;
  });

  socket.on("typing", data => {
    console.log(data.username);
    socket.broadcast
      .to(data.sala)
      .emit("isTyping", { username: data.username, message: data.message });
  });

  socket.on("stopTyping", data => {
    socket.broadcast.to(data.sala).emit("userstopTyping");
  });
});
